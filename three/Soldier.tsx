'use client'
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 ../public/gltf/Soldier.glb -t 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'Idle' | 'Run' | 'TPose' | 'Walk'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    vanguard_Mesh: THREE.SkinnedMesh
    vanguard_visor: THREE.SkinnedMesh
    mixamorigHips: THREE.Bone
  }
  materials: {
    VanguardBodyMat: THREE.MeshStandardMaterial
    Vanguard_VisorMat: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export default function Soldier(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group<THREE.Object3DEventMap>>(null!)
  const { scene, animations } = useGLTF('/gltf/Soldier.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  // const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Character" rotation={[-Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="vanguard_Mesh" geometry={nodes.vanguard_Mesh.geometry} material={materials.VanguardBodyMat} skeleton={nodes.vanguard_Mesh.skeleton} />
          <skinnedMesh name="vanguard_visor" geometry={nodes.vanguard_visor.geometry} material={materials.Vanguard_VisorMat} skeleton={nodes.vanguard_visor.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/gltf/Soldier.glb')
